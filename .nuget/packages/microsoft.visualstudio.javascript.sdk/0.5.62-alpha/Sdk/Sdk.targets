<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|AnyCPU">
      <Configuration>Debug</Configuration>
      <Platform>AnyCPU</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|AnyCPU">
      <Configuration>Release</Configuration>
      <Platform>AnyCPU</Platform>
    </ProjectConfiguration>
  </ItemGroup>

  <!--
    Rule files that don't need localization go in the neutral directory to save duplicating files into each language
  -->
  <PropertyGroup Condition="'$(JspsXamlNeutralResourcesDirectory)' == ''">
    <JspsXamlNeutralResourcesDirectory>$(MSBuildThisFileDirectory)Rules</JspsXamlNeutralResourcesDirectory>
  </PropertyGroup>

  <!--
    Locate the approriate localized xaml resources based on the language ID or name.
    The logic here matches the resource manager sufficiently to handle the fixed set of 
    possible VS languages and directories on disk.
    We cannot respect the exact probe order of the resource manager as this has to evaluate statically
    and we have only LangName and LangID and no access to System.Globalization API.
  -->
  <PropertyGroup Condition="'$(JspsXamlResourcesDirectory)' == ''">
    <!-- 1. Probe for exact match against LangName. (e.g. pt-BR) -->
    <JspsXamlResourcesDirectory>$(MSBuildThisFileDirectory)Rules\$(LangName)</JspsXamlResourcesDirectory>

    <!-- 2. Handle special cases of languages which would not match above or below. -->
    <JspsXamlResourcesDirectory Condition="!Exists('$(JspsXamlResourcesDirectory)') and '$(LangID)' == '2052'">$(MSBuildThisFileDirectory)Rules\zh-Hans</JspsXamlResourcesDirectory>
    <JspsXamlResourcesDirectory Condition="!Exists('$(JspsXamlResourcesDirectory)') and '$(LangID)' == '1028'">$(MSBuildThisFileDirectory)Rules\zh-Hant</JspsXamlResourcesDirectory>

    <!-- 3. Probe for parent by taking portion the portion before the hyphen (e.g. fr-FR -> fr) -->
    <JspsXamlResourcesDirectory Condition="!Exists('$(JspsXamlResourcesDirectory)')">$(MSBuildThisFileDirectory)Rules\$(LangName.Split('-')[0])</JspsXamlResourcesDirectory>

    <!-- 4. Fall back to neutral resources if all of the above fail -->
    <JspsXamlResourcesDirectory Condition="!Exists('$(JspsXamlResourcesDirectory)')">$(JspsXamlNeutralResourcesDirectory)</JspsXamlResourcesDirectory>
  </PropertyGroup>

  <!-- Capabilities for this project.  Conditions should be based on platform|configuration only. -->
  <ItemGroup>
    <ProjectCapability Include="JSProjectSystem" />
    <ProjectCapability Include="UseFileGlobs" />
    <ProjectCapability Include="OpenProjectFile" />
    <ProjectCapability Include="HandlesOwnReload" />
    <ProjectCapability Include="ProjectConfigurationsDeclaredAsItems" />
    <ProjectCapability Include="ProjectPropertiesEditor" />
    <ProjectCapability Include="ProjectPropertyInterception" />
    <ProjectCapability Include="AvoidAddingProjectGuid" />
  </ItemGroup>

  <!-- Automatically include default items. -->
  <ItemGroup Condition=" '$(EnableDefaultItems)' == 'true' ">
      <!-- Automatically include TypeScriptConfiguration items. -->
      <TypeScriptConfiguration Include="$(DefaultTypeScriptConfigurationItemIncludes)" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" Condition=" '$(EnableDefaultTypeScriptConfigurationItems)' == 'true' " />
  </ItemGroup>

  <!-- If EnableDefaultNoneItems, then everything else that wasn't added already will now be added as None items. -->
  <ItemGroup Condition=" '$(EnableDefaultItems)' == 'true' And '$(EnableDefaultNoneItems)' == 'true' ">
    <!-- Automatically include everything as None items. -->
    <None Include="**/*" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" />

    <!-- If there were any items added as anything other than None already, then remove those. -->
    <None Remove="$(DefaultTypeScriptConfigurationItemIncludes)" Condition=" '$(EnableDefaultTypeScriptConfigurationItems)' == 'true' " />
  </ItemGroup>

  <ItemGroup>
    <PropertyPageSchema Include="$(JspsXamlResourcesDirectory)\ProjectItemsSchema.xaml;"/>

    <PropertyPageSchema Include="$(JspsXamlResourcesDirectory)\general.xaml;">
      <Context>Project</Context>
    </PropertyPageSchema>
    <PropertyPageSchema Include="$(JspsXamlResourcesDirectory)\debugger_general.xaml;">
      <Context>Project</Context>
    </PropertyPageSchema>
    <PropertyPageSchema Include="$(JspsXamlResourcesDirectory)\general_file.xaml">
      <Context>File</Context>
    </PropertyPageSchema>
    <PropertyPageSchema Include="$(JspsXamlResourcesDirectory)\scc.xaml">
      <Context>Invisible</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(JspsXamlResourcesDirectory)\BuildProperties.xaml">
      <Context>Project</Context>
    </PropertyPageSchema>
    <PropertyPageSchema Include="$(JspsXamlResourcesDirectory)\DeployProperties.xaml;">
      <Context>Project</Context>
    </PropertyPageSchema>
    <PropertyPageSchema Include="$(JspsXamlResourcesDirectory)\LaunchJsonDebugger.xaml">
      <Context>Project</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="
                        $(JspsXamlResourcesDirectory)\folder.xaml;
                        $(JspsXamlResourcesDirectory)\none.xaml;
                        ">
      <Context>File;BrowseObject</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(JspsXamlResourcesDirectory)\general.browseobject.xaml">
      <Context>BrowseObject</Context>
    </PropertyPageSchema>
  </ItemGroup>
    
    <!-- 
    This property group was added simply to address some needed properties for Microsoft.Common.targets. We should not copy build output because Common.targets only 
    handles .dlls and .exe, and we don't generate those. 
    -->
    <PropertyGroup>
        <OutputPath>$(MSBuildProjectFullPath)\</OutputPath>
        <TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion>
        <TargetFrameworkMoniker>.NETFramework,Version=$(TargetFrameworkVersion)</TargetFrameworkMoniker>
        <CopyBuildOutputToOutputDirectory>false</CopyBuildOutputToOutputDirectory>
    </PropertyGroup>
    
    <Target Name="CreateManifestResourceNames" />
    
    <!-- 
    CoreCompile is a target inside target Build on Microsoft.Common.targets that is not implemented there but allows us to personalize our compile/build flow, while 
    executing all the other targets inside Build regularly. We implement it before importing Common.targets because it's not implemented there, so it will not be
    overriden when importing the targets.
    -->
    <Target Name="CoreCompile" >
        <Exec Command="$(BuildCommand)" WorkingDirectory="$(BuildWorkingDirectory)" Condition=" '$(BuildCommand)' != '' "/>
    </Target>
    
    <Import Project="$(MSBuildToolsPath)\Microsoft.Common.targets" />

    <!-- 
    Override to PrepareForBuild on Microsoft.Common.targets as this target tries to create folders for project outputs - but that's not necessary for our project
    system. This was creating a warning MSB3191 for failure creating folders. We don't need it because we are not using MSBuild to build, npm build does that for us.
    -->
    <Target Name="PrepareForBuild" DependsOnTargets="$(PrepareForBuildDependsOn)" />

    <!--
    Override ResolveAssemblyReferences as it throws a warning when trying to access the AssemblyCache and we don't need any assembly.
    -->
    <Target
     Name="ResolveAssemblyReferences"
     Returns=""
     DependsOnTargets="$(ResolveAssemblyReferencesDependsOn)" />

    <!--
    Our personalized Clean. First executing any command set on CleanCommand and hooking it to BeforeClean running it before it. 
    -->
    <Target Name="_CleanBuildOutput" BeforeTargets="BeforeClean">
        <Exec Command="$(CleanCommand)" WorkingDirectory="$(BuildWorkingDirectory)" Condition=" '$(CleanCommand)' != '' "/>
    </Target>

     <!-- This target is copied from the ASP.NET SPA template in order to ensure node_modules are in place. -->
    <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
        <!-- Ensure Node.js is installed -->
        <Exec Command="node --version" ContinueOnError="true">
            <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
        </Exec>
        <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
        <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
        <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
    </Target>
    
    <!-- 
    Since we don't copy targets using Microsoft.Common.targets we do this ourselves using this target to copy our output files to the Publish folder.
    This works by running the ProductionBuildCommand (usually `npm run build`) and then adding the generated output to the property AllPublishItemsFullPathWithTargetPath
    with both those Copy properties set to 'Always' as we need to signalize that these files should be copied. We hook this to run before GetCopyToPublishDirectoryItems
    as this is the target that will populate this list with the .csproj output files for Publish.
    -->
    <Target Name="_NpmGetCopyToPublishDirectoryItems"  BeforeTargets="GetCopyToPublishDirectoryItems">
        <Exec Command="$(ProductionBuildCommand)" WorkingDirectory="$(BuildWorkingDirectory)" Condition=" '$(ProductionBuildCommand)' != '' "/>
        <ItemGroup>
            <_NpmPublishedContent Include="$(BuildOutputFolder)\**" />
            <AllPublishItemsFullPathWithTargetPath Include="@(_NpmPublishedContent->'%(FullPath)')">
                <TargetPath>wwwroot\%(RecursiveDir)\%(FileName)%(Extension)</TargetPath>
                <CopyToOutputDirectory>Always</CopyToOutputDirectory>
                <CopyToPublishDirectory>Always</CopyToPublishDirectory>
            </AllPublishItemsFullPathWithTargetPath>
        </ItemGroup>
    </Target>
</Project>